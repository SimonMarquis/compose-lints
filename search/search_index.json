{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Compose Lints \u00b6 This repository contains a collection of custom lint checks for Jetpack Compose, mostly ported from the original twitter/compose-rules project. These checks are to ensure that your composables don\u2019t fall into common pitfalls that may be easy to miss in code reviews. Why \u00b6 Originally from twitter/compose-rules. It can be challenging for big teams to start adopting Compose, particularly because not everyone will start at same time or with the same patterns. Twitter tried to ease the pain by creating a set of Compose static checks. Compose has lots of superpowers but also has a bunch of footguns to be aware of as seen in this Twitter Thread . This is where our static checks come in. We want to detect as many potential issues as we can, as quickly as we can. In this case we want an error to show prior to engineers having to review code. Similar to other static check libraries we hope this leads to a \u201cdon\u2019t shoot the messengers\u201d philosophy which will foster healthy Compose adoption. License \u00b6 Copyright 2023 Salesforce, Inc. Copyright 2022 Twitter, Inc. Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with the License. You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0 Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions and limitations under the License.","title":"Overview"},{"location":"#compose-lints","text":"This repository contains a collection of custom lint checks for Jetpack Compose, mostly ported from the original twitter/compose-rules project. These checks are to ensure that your composables don\u2019t fall into common pitfalls that may be easy to miss in code reviews.","title":"Compose Lints"},{"location":"#why","text":"Originally from twitter/compose-rules. It can be challenging for big teams to start adopting Compose, particularly because not everyone will start at same time or with the same patterns. Twitter tried to ease the pain by creating a set of Compose static checks. Compose has lots of superpowers but also has a bunch of footguns to be aware of as seen in this Twitter Thread . This is where our static checks come in. We want to detect as many potential issues as we can, as quickly as we can. In this case we want an error to show prior to engineers having to review code. Similar to other static check libraries we hope this leads to a \u201cdon\u2019t shoot the messengers\u201d philosophy which will foster healthy Compose adoption.","title":"Why"},{"location":"#license","text":"Copyright 2023 Salesforce, Inc. Copyright 2022 Twitter, Inc. Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with the License. You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0 Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions and limitations under the License.","title":"License"},{"location":"changelog/","text":"Changelog \u00b6 1.0.0 \u00b6 2023-02-09 Initial release! This is a near-full port of the original rule set to lint. It should be mostly at parity with the original rules as well. The lints target lint-api 30.4.0 /lint API 13 and target Java 11. See the docs for full usage and information: https://slackhq.github.io/compose-lints . Notes - ComposeViewModelInjection does not offer a quickfix yet. PRs welcome! - ComposeUnstableCollections is a warning by default rather than an error. - CompositionLocalNaming is not ported because this is offered in compose\u2019s bundled lint rules now.","title":"Change Log"},{"location":"changelog/#changelog","text":"","title":"Changelog"},{"location":"changelog/#100","text":"2023-02-09 Initial release! This is a near-full port of the original rule set to lint. It should be mostly at parity with the original rules as well. The lints target lint-api 30.4.0 /lint API 13 and target Java 11. See the docs for full usage and information: https://slackhq.github.io/compose-lints . Notes - ComposeViewModelInjection does not offer a quickfix yet. PRs welcome! - ComposeUnstableCollections is a warning by default rather than an error. - CompositionLocalNaming is not ported because this is offered in compose\u2019s bundled lint rules now.","title":"1.0.0"},{"location":"code-of-conduct/","text":"Code of Conduct \u00b6 Introduction \u00b6 Diversity and inclusion make our community strong. We encourage participation from the most varied and diverse backgrounds possible and want to be very clear about where we stand. Our goal is to maintain a safe, helpful and friendly community for everyone, regardless of experience, gender identity and expression, sexual orientation, disability, personal appearance, body size, race, ethnicity, age, religion, nationality, or other defining characteristic. This code and related procedures also apply to unacceptable behavior occurring outside the scope of community activities, in all community venues (online and in-person) as well as in all one-on-one communications, and anywhere such behavior has the potential to adversely affect the safety and well-being of community members. For more information on our code of conduct, please visit https://slackhq.github.io/code-of-conduct","title":"CoC"},{"location":"code-of-conduct/#code-of-conduct","text":"","title":"Code of Conduct"},{"location":"code-of-conduct/#introduction","text":"Diversity and inclusion make our community strong. We encourage participation from the most varied and diverse backgrounds possible and want to be very clear about where we stand. Our goal is to maintain a safe, helpful and friendly community for everyone, regardless of experience, gender identity and expression, sexual orientation, disability, personal appearance, body size, race, ethnicity, age, religion, nationality, or other defining characteristic. This code and related procedures also apply to unacceptable behavior occurring outside the scope of community activities, in all community venues (online and in-person) as well as in all one-on-one communications, and anywhere such behavior has the potential to adversely affect the safety and well-being of community members. For more information on our code of conduct, please visit https://slackhq.github.io/code-of-conduct","title":"Introduction"},{"location":"contributing/","text":"Contributors Guide \u00b6 Development \u00b6 Check out this repo with Android Studio or IntelliJ. It\u2019s a standard gradle project and conventional to check out. The primary project is slack-lint . Kotlin should be used for more idiomatic use with lint APIs. Setup \u00b6 Be sure your devel environment has ANDROID_HOME defined or you\u2019ll have trouble running tests that require the Android SDK. If you\u2019ve added it and still seeing the error about not having it defined while running tests, try closing and re-opening Android Studio. Lint Documentation \u00b6 The Android Lint API Guide provides an excellent overview of lint\u2019s purpose, how it works, and how to author custom checks. Lint Guidelines \u00b6 Limited scopes. Remember this will run in a slow build step or during the IDE, performance matters! If your check only matters for java or kotlin, only run on appropriate files Use the smallest necessary scope. Avoid tree walking through the AST if it can be avoided, there are usually more appropriate hooks. Use UElementHandler (via overriding createUastHandler() ) rather than overriding Detector callback methods. Detector callback methods tend only to be useful for tricky scenarios, like annotated elements. For basic UElement types it\u2019s best to just use UElementHandler as it affords a standard API and is easy to conditionally avoid nested parsing. For testing, prefer writing source stubs directly in the test rather than extract individual files in resources for stubs. Stubs in resources add friction for source glancing and tedious to maintain, and should only be used for extremely complex source files. Use our implementation<*Detector>() helper functions for wiring your Issue information. This is important because it will help ensure your check works in both command line and in the IDE.","title":"Contributing"},{"location":"contributing/#contributors-guide","text":"","title":"Contributors Guide"},{"location":"contributing/#development","text":"Check out this repo with Android Studio or IntelliJ. It\u2019s a standard gradle project and conventional to check out. The primary project is slack-lint . Kotlin should be used for more idiomatic use with lint APIs.","title":"Development"},{"location":"contributing/#setup","text":"Be sure your devel environment has ANDROID_HOME defined or you\u2019ll have trouble running tests that require the Android SDK. If you\u2019ve added it and still seeing the error about not having it defined while running tests, try closing and re-opening Android Studio.","title":"Setup"},{"location":"contributing/#lint-documentation","text":"The Android Lint API Guide provides an excellent overview of lint\u2019s purpose, how it works, and how to author custom checks.","title":"Lint Documentation"},{"location":"contributing/#lint-guidelines","text":"Limited scopes. Remember this will run in a slow build step or during the IDE, performance matters! If your check only matters for java or kotlin, only run on appropriate files Use the smallest necessary scope. Avoid tree walking through the AST if it can be avoided, there are usually more appropriate hooks. Use UElementHandler (via overriding createUastHandler() ) rather than overriding Detector callback methods. Detector callback methods tend only to be useful for tricky scenarios, like annotated elements. For basic UElement types it\u2019s best to just use UElementHandler as it affords a standard API and is easy to conditionally avoid nested parsing. For testing, prefer writing source stubs directly in the test rather than extract individual files in resources for stubs. Stubs in resources add friction for source glancing and tedious to maintain, and should only be used for extremely complex source files. Use our implementation<*Detector>() helper functions for wiring your Issue information. This is important because it will help ensure your check works in both command line and in the IDE.","title":"Lint Guidelines"},{"location":"rules/","text":"State \u00b6 Hoist all the things \u00b6 Compose is built upon the idea of a unidirectional data flow , which can be summarised as: data/state flows down, and events fire up. To implement that, Compose advocates for the pattern of hoisting state upwards, enabling the majority of your composable functions to be stateless. This has many benefits, including far easier testing. In practice, there are a few common things to look out for: Do not pass ViewModels (or objects from DI) down. Do not pass State<Foo> or MutableState<Bar> instances down. Instead, pass down the relevant data to the function, and optional lambdas for callbacks. More information: State and Jetpack Compose Related rule: ComposeViewModelForwarding State should be remembered in composables \u00b6 Be careful when using mutableStateOf (or any of the other state builders) to make sure that you remember the instance. If you don\u2019t remember the state instance, a new state instance will be created when the function is recomposed. Related rule: ComposeRememberMissing Avoid using unstable collections \u00b6 Collections are defined as interfaces (e.g. List<T> , Map<T> , Set<T> ) in Kotlin, which can\u2019t guarantee that they are actually immutable. For example, you could write: val list : List < String > = mutableListOf < String > () The variable is constant, its declared type is not mutable but its implementation is still mutable. The Compose compiler cannot be sure of the immutability of this class as it just sees the declared type and as such declares it as unstable. To force the compiler to see a collection as truly \u2018immutable\u2019 you have a couple of options. You can use Kotlinx Immutable Collections : val list : ImmutableList < String > = persistentListOf < String > () Alternatively, you can wrap your collection in an annotated stable class to mark it as immutable for the Compose compiler. @Immutable data class StringList ( val items : List < String > ) // ... val list : StringList = StringList ( yourList ) Note : It is preferred to use Kotlinx Immutable Collections for this. As you can see, the wrapped case only includes the immutability promise with the annotation, but the underlying List is still mutable. More info: Jetpack Compose Stability Explained , Kotlinx Immutable Collections Related rule: ComposeUnstableCollections Composables \u00b6 Do not use inherently mutable types as parameters \u00b6 This practice follows on from the \u2018Hoist all the things\u2019 item above, where we said that state flows down. It might be tempting to pass mutable state down to a function to mutate the value. This is an anti-pattern though as it breaks the pattern of state flowing down, and events firing up. The mutation of the value is an event which should be modelled within the function API (a lambda callback). There are a few reasons for this, but the main one is that it is very easy to use a mutable object which does not trigger recomposition. Without triggering recomposition, your composables will not automatically update to reflect the updated value. Passing ArrayList<T> , MutableState<T> , ViewModel are common examples of this (but not limited to those types). Related rule: ComposeMutableParameters Do not emit content and return a result \u00b6 Composable functions should either emit layout content, or return a value, but not both. If a composable should offer additional control surfaces to its caller, those control surfaces or callbacks should be provided as parameters to the composable function by the caller. More info: Compose API guidelines Related rule: ComposeMultipleContentEmitters Configuration To add your custom composables so they are used in this rule (things like your design system composables), you can configure a content-emitters option in lint.xml . <issue id= \"ComposeMultipleContentEmitters\" > <option name= \"allowed-composition-locals\" value= \"CustomEmitter,AnotherEmitter\" /> </issue> Do not emit multiple pieces of content \u00b6 A composable function should emit either 0 or 1 pieces of layout, but no more. A composable function should be cohesive, and not rely on what function it is called from. You can see an example of what not to do below. InnerContent() emits a number of layout nodes and assumes that it will be called from a Column: Column { InnerContent () } @Composable private fun InnerContent () { Text (...) Image (...) Button (...) } However InnerContent could just as easily be called from a Row which would break all assumptions. Instead, InnerContent should be cohesive and emit a single layout node itself: @Composable private fun InnerContent () { Column { Text (...) Image (...) Button (...) } } Nesting of layouts has a drastically lower cost vs the view system, so developers should not try to minimize UI layers at the cost of correctness. There is a slight exception to this rule, which is when the function is defined as an extension function of an appropriate scope, like so: @Composable private fun ColumnScope . InnerContent () { Text (...) Image (...) Button (...) } This effectively ties the function to be called from a Column, but is still not recommended (although permitted). Related rule: ComposeMultipleContentEmitters Configuration To add your custom composables so they are used in this rule (things like your design system composables), you can configure a content-emitters option in lint.xml . <issue id= \"ComposeMultipleContentEmitters\" > <option name= \"allowed-composition-locals\" value= \"CustomEmitter,AnotherEmitter\" /> </issue> Naming multipreview annotations properly \u00b6 Multipreview annotations should be named by using Previews as suffix (or Preview if just one). These annotations have to be explicitly named to make sure that they are clearly identifiable as a @Preview alternative on its usages. More information: Multipreview annotations Related rule: ComposePreviewNaming Naming @Composable functions properly \u00b6 Composable functions that return Unit should start with an uppercase letter. They are considered declarative entities that can be either present or absent in a composition and therefore follow the naming rules for classes. However, Composable functions that return a value should start with a lowercase letter instead. They should follow the standard Kotlin Coding Conventions for the naming of functions for any function annotated @Composable that returns a value other than Unit More information: Naming Unit @Composable functions as entities and Naming @Composable functions that return values Related rules: ComposeNamingUppercase , ComposeNamingLowercase Configuration To allow certain regex patterns of names, you can configure the allowed-composable-function-names option in lint.xml . <issue id= \"ComposeNamingUppercase,ComposeNamingLowercase\" > <option name= \"allowed-composable-function-names\" value= \".*Presenter\" /> </issue> Ordering @Composable parameters properly \u00b6 When writing Kotlin, it\u2019s a good practice to write the parameters for your methods by putting the mandatory parameters first, followed by the optional ones (aka the ones with default values). By doing so, we minimize the number times we will need to write the name for arguments explicitly . Modifiers occupy the first optional parameter slot to set a consistent expectation for developers that they can always provide a modifier as the final positional parameter to an element call for any given element\u2019s common case. More information: Kotlin default arguments , Modifier docs and Elements accept and respect a Modifier parameter . Related rule: ComposeParameterOrder Make dependencies explicit \u00b6 ViewModels \u00b6 When designing composables, try to be explicit about the dependencies they take in. If you acquire a ViewModel or an instance from DI in the body of the composable, you are making this dependency implicit, which has the downsides of making it hard to test and harder to reuse. To solve this problem, you should inject these dependencies as default values in the composable function. Let\u2019s see it with an example. @Composable private fun MyComposable () { val viewModel = viewModel < MyViewModel > () // ... } In this composable, the dependencies are implicit. When testing it you would need to fake the internals of viewModel somehow to be able to acquire your intended ViewModel. But, if you change it to pass these instances via the composable function parameters, you could provide the instance you want directly in your tests without any extra effort. It would also have the upside of the function being explicit about its external dependencies in its signature. @Composable private fun MyComposable ( viewModel : MyViewModel = viewModel (), ) { // ... } Related rule: ComposeViewModelInjection CompositionLocal s \u00b6 CompositionLocal makes a composable\u2019s behavior harder to reason about. As they create implicit dependencies, callers of composables that use them need to make sure that a value for every CompositionLocal is satisfied. Although uncommon, there are legit use cases for them, so this rule provides an allowlist so that you can add your CompositionLocal names to it so that they are not flagged by the rule. Related rule: [ ComposeCompositionLocalUsage ]( https://github.com/slackhq/compose-lints/blob/main/compose-lint-checks/src/main/java/slack/lint/compose/CompositionLocalUsageDetector.kt Configuration To add your custom CompositionLocal to your allowlist, you can configure a allowed-composition-locals option in lint.xml . <issue id= \"ComposeCompositionLocalUsage\" > <option name= \"allowed-composition-locals\" value= \"LocalEnabled,LocalThing\" /> </issue> Preview composables should not be public \u00b6 When a composable function exists solely because it\u2019s a @Preview , it doesn\u2019t need to have public visibility because it won\u2019t be used in actual UI. To prevent folks from using it unknowingly, we should restrict its visibility to private . Related rule: ComposePreviewPublic Note : If you are using Detekt, this may conflict with Detekt\u2019s UnusedPrivateMember rule . Be sure to set Detekt\u2019s ignoreAnnotated configuration to [\u2018Preview\u2019] for compatibility with this rule. Modifiers \u00b6 When should I expose modifier parameters? \u00b6 Modifiers are the beating heart of Compose UI. They encapsulate the idea of composition over inheritance, by allowing developers to attach logic and behavior to layouts. They are especially important for your public components, as they allow callers to customize the component to their wishes. More info: Always provide a Modifier parameter Related rule: ComposeModifierMissing Don\u2019t re-use modifiers \u00b6 Modifiers which are passed in are designed so that they should be used by a single layout node in the composable function. If the provided modifier is used by multiple composables at different levels, unwanted behaviour can happen. In the following example we\u2019ve exposed a public modifier parameter, and then passed it to the root Column, but we\u2019ve also passed it to each of the descendant calls, with some extra modifiers on top: @Composable private fun InnerContent ( modifier : Modifier = Modifier ) { Column ( modifier ) { Text ( modifier . clickable (), ...) Image ( modifier . size (), ...) Button ( modifier , ...) } } This is not recommended. Instead, the provided modifier should only be used on the Column. The descendant calls should use newly built modifiers, by using the empty Modifier object: @Composable private fun InnerContent ( modifier : Modifier = Modifier ) { Column ( modifier ) { Text ( Modifier . clickable (), ...) Image ( Modifier . size (), ...) Button ( Modifier , ...) } } Related rule: ComposeModifierReused Modifiers should have default parameters \u00b6 Composables that accept a Modifier as a parameter to be applied to the whole component represented by the composable function should name the parameter modifier and assign the parameter a default value of Modifier . It should appear as the first optional parameter in the parameter list; after all required parameters (except for trailing lambda parameters) but before any other parameters with default values. Any default modifiers desired by a composable function should come after the modifier parameter\u2019s value in the composable function\u2019s implementation, keeping Modifier as the default parameter value. More info: Modifier documentation Related rule: ComposeModifierWithoutDefault Avoid Modifier extension factory functions \u00b6 Using @Composable builder functions for modifiers is not recommended, as they cause unnecessary recompositions. To avoid this, you should use Modifier.composed instead, as it limits recomposition to just the modifier instance, rather than the whole function tree. Composed modifiers may be created outside of composition, shared across elements, and declared as top-level constants, making them more flexible than modifiers that can only be created via a @Composable function call, and easier to avoid accidentally sharing state across elements. More info: Modifier extensions , Composed modifiers in Jetpack Compose by Jorge Castillo and Composed modifiers in API guidelines Related rule: ComposeComposableModifier","title":"Rules"},{"location":"rules/#state","text":"","title":"State"},{"location":"rules/#hoist-all-the-things","text":"Compose is built upon the idea of a unidirectional data flow , which can be summarised as: data/state flows down, and events fire up. To implement that, Compose advocates for the pattern of hoisting state upwards, enabling the majority of your composable functions to be stateless. This has many benefits, including far easier testing. In practice, there are a few common things to look out for: Do not pass ViewModels (or objects from DI) down. Do not pass State<Foo> or MutableState<Bar> instances down. Instead, pass down the relevant data to the function, and optional lambdas for callbacks. More information: State and Jetpack Compose Related rule: ComposeViewModelForwarding","title":"Hoist all the things"},{"location":"rules/#state-should-be-remembered-in-composables","text":"Be careful when using mutableStateOf (or any of the other state builders) to make sure that you remember the instance. If you don\u2019t remember the state instance, a new state instance will be created when the function is recomposed. Related rule: ComposeRememberMissing","title":"State should be remembered in composables"},{"location":"rules/#avoid-using-unstable-collections","text":"Collections are defined as interfaces (e.g. List<T> , Map<T> , Set<T> ) in Kotlin, which can\u2019t guarantee that they are actually immutable. For example, you could write: val list : List < String > = mutableListOf < String > () The variable is constant, its declared type is not mutable but its implementation is still mutable. The Compose compiler cannot be sure of the immutability of this class as it just sees the declared type and as such declares it as unstable. To force the compiler to see a collection as truly \u2018immutable\u2019 you have a couple of options. You can use Kotlinx Immutable Collections : val list : ImmutableList < String > = persistentListOf < String > () Alternatively, you can wrap your collection in an annotated stable class to mark it as immutable for the Compose compiler. @Immutable data class StringList ( val items : List < String > ) // ... val list : StringList = StringList ( yourList ) Note : It is preferred to use Kotlinx Immutable Collections for this. As you can see, the wrapped case only includes the immutability promise with the annotation, but the underlying List is still mutable. More info: Jetpack Compose Stability Explained , Kotlinx Immutable Collections Related rule: ComposeUnstableCollections","title":"Avoid using unstable collections"},{"location":"rules/#composables","text":"","title":"Composables"},{"location":"rules/#do-not-use-inherently-mutable-types-as-parameters","text":"This practice follows on from the \u2018Hoist all the things\u2019 item above, where we said that state flows down. It might be tempting to pass mutable state down to a function to mutate the value. This is an anti-pattern though as it breaks the pattern of state flowing down, and events firing up. The mutation of the value is an event which should be modelled within the function API (a lambda callback). There are a few reasons for this, but the main one is that it is very easy to use a mutable object which does not trigger recomposition. Without triggering recomposition, your composables will not automatically update to reflect the updated value. Passing ArrayList<T> , MutableState<T> , ViewModel are common examples of this (but not limited to those types). Related rule: ComposeMutableParameters","title":"Do not use inherently mutable types as parameters"},{"location":"rules/#do-not-emit-content-and-return-a-result","text":"Composable functions should either emit layout content, or return a value, but not both. If a composable should offer additional control surfaces to its caller, those control surfaces or callbacks should be provided as parameters to the composable function by the caller. More info: Compose API guidelines Related rule: ComposeMultipleContentEmitters Configuration To add your custom composables so they are used in this rule (things like your design system composables), you can configure a content-emitters option in lint.xml . <issue id= \"ComposeMultipleContentEmitters\" > <option name= \"allowed-composition-locals\" value= \"CustomEmitter,AnotherEmitter\" /> </issue>","title":"Do not emit content and return a result"},{"location":"rules/#do-not-emit-multiple-pieces-of-content","text":"A composable function should emit either 0 or 1 pieces of layout, but no more. A composable function should be cohesive, and not rely on what function it is called from. You can see an example of what not to do below. InnerContent() emits a number of layout nodes and assumes that it will be called from a Column: Column { InnerContent () } @Composable private fun InnerContent () { Text (...) Image (...) Button (...) } However InnerContent could just as easily be called from a Row which would break all assumptions. Instead, InnerContent should be cohesive and emit a single layout node itself: @Composable private fun InnerContent () { Column { Text (...) Image (...) Button (...) } } Nesting of layouts has a drastically lower cost vs the view system, so developers should not try to minimize UI layers at the cost of correctness. There is a slight exception to this rule, which is when the function is defined as an extension function of an appropriate scope, like so: @Composable private fun ColumnScope . InnerContent () { Text (...) Image (...) Button (...) } This effectively ties the function to be called from a Column, but is still not recommended (although permitted). Related rule: ComposeMultipleContentEmitters Configuration To add your custom composables so they are used in this rule (things like your design system composables), you can configure a content-emitters option in lint.xml . <issue id= \"ComposeMultipleContentEmitters\" > <option name= \"allowed-composition-locals\" value= \"CustomEmitter,AnotherEmitter\" /> </issue>","title":"Do not emit multiple pieces of content"},{"location":"rules/#naming-multipreview-annotations-properly","text":"Multipreview annotations should be named by using Previews as suffix (or Preview if just one). These annotations have to be explicitly named to make sure that they are clearly identifiable as a @Preview alternative on its usages. More information: Multipreview annotations Related rule: ComposePreviewNaming","title":"Naming multipreview annotations properly"},{"location":"rules/#naming-composable-functions-properly","text":"Composable functions that return Unit should start with an uppercase letter. They are considered declarative entities that can be either present or absent in a composition and therefore follow the naming rules for classes. However, Composable functions that return a value should start with a lowercase letter instead. They should follow the standard Kotlin Coding Conventions for the naming of functions for any function annotated @Composable that returns a value other than Unit More information: Naming Unit @Composable functions as entities and Naming @Composable functions that return values Related rules: ComposeNamingUppercase , ComposeNamingLowercase Configuration To allow certain regex patterns of names, you can configure the allowed-composable-function-names option in lint.xml . <issue id= \"ComposeNamingUppercase,ComposeNamingLowercase\" > <option name= \"allowed-composable-function-names\" value= \".*Presenter\" /> </issue>","title":"Naming @Composable functions properly"},{"location":"rules/#ordering-composable-parameters-properly","text":"When writing Kotlin, it\u2019s a good practice to write the parameters for your methods by putting the mandatory parameters first, followed by the optional ones (aka the ones with default values). By doing so, we minimize the number times we will need to write the name for arguments explicitly . Modifiers occupy the first optional parameter slot to set a consistent expectation for developers that they can always provide a modifier as the final positional parameter to an element call for any given element\u2019s common case. More information: Kotlin default arguments , Modifier docs and Elements accept and respect a Modifier parameter . Related rule: ComposeParameterOrder","title":"Ordering @Composable parameters properly"},{"location":"rules/#make-dependencies-explicit","text":"","title":"Make dependencies explicit"},{"location":"rules/#viewmodels","text":"When designing composables, try to be explicit about the dependencies they take in. If you acquire a ViewModel or an instance from DI in the body of the composable, you are making this dependency implicit, which has the downsides of making it hard to test and harder to reuse. To solve this problem, you should inject these dependencies as default values in the composable function. Let\u2019s see it with an example. @Composable private fun MyComposable () { val viewModel = viewModel < MyViewModel > () // ... } In this composable, the dependencies are implicit. When testing it you would need to fake the internals of viewModel somehow to be able to acquire your intended ViewModel. But, if you change it to pass these instances via the composable function parameters, you could provide the instance you want directly in your tests without any extra effort. It would also have the upside of the function being explicit about its external dependencies in its signature. @Composable private fun MyComposable ( viewModel : MyViewModel = viewModel (), ) { // ... } Related rule: ComposeViewModelInjection","title":"ViewModels"},{"location":"rules/#compositionlocals","text":"CompositionLocal makes a composable\u2019s behavior harder to reason about. As they create implicit dependencies, callers of composables that use them need to make sure that a value for every CompositionLocal is satisfied. Although uncommon, there are legit use cases for them, so this rule provides an allowlist so that you can add your CompositionLocal names to it so that they are not flagged by the rule. Related rule: [ ComposeCompositionLocalUsage ]( https://github.com/slackhq/compose-lints/blob/main/compose-lint-checks/src/main/java/slack/lint/compose/CompositionLocalUsageDetector.kt Configuration To add your custom CompositionLocal to your allowlist, you can configure a allowed-composition-locals option in lint.xml . <issue id= \"ComposeCompositionLocalUsage\" > <option name= \"allowed-composition-locals\" value= \"LocalEnabled,LocalThing\" /> </issue>","title":"CompositionLocals"},{"location":"rules/#preview-composables-should-not-be-public","text":"When a composable function exists solely because it\u2019s a @Preview , it doesn\u2019t need to have public visibility because it won\u2019t be used in actual UI. To prevent folks from using it unknowingly, we should restrict its visibility to private . Related rule: ComposePreviewPublic Note : If you are using Detekt, this may conflict with Detekt\u2019s UnusedPrivateMember rule . Be sure to set Detekt\u2019s ignoreAnnotated configuration to [\u2018Preview\u2019] for compatibility with this rule.","title":"Preview composables should not be public"},{"location":"rules/#modifiers","text":"","title":"Modifiers"},{"location":"rules/#when-should-i-expose-modifier-parameters","text":"Modifiers are the beating heart of Compose UI. They encapsulate the idea of composition over inheritance, by allowing developers to attach logic and behavior to layouts. They are especially important for your public components, as they allow callers to customize the component to their wishes. More info: Always provide a Modifier parameter Related rule: ComposeModifierMissing","title":"When should I expose modifier parameters?"},{"location":"rules/#dont-re-use-modifiers","text":"Modifiers which are passed in are designed so that they should be used by a single layout node in the composable function. If the provided modifier is used by multiple composables at different levels, unwanted behaviour can happen. In the following example we\u2019ve exposed a public modifier parameter, and then passed it to the root Column, but we\u2019ve also passed it to each of the descendant calls, with some extra modifiers on top: @Composable private fun InnerContent ( modifier : Modifier = Modifier ) { Column ( modifier ) { Text ( modifier . clickable (), ...) Image ( modifier . size (), ...) Button ( modifier , ...) } } This is not recommended. Instead, the provided modifier should only be used on the Column. The descendant calls should use newly built modifiers, by using the empty Modifier object: @Composable private fun InnerContent ( modifier : Modifier = Modifier ) { Column ( modifier ) { Text ( Modifier . clickable (), ...) Image ( Modifier . size (), ...) Button ( Modifier , ...) } } Related rule: ComposeModifierReused","title":"Don't re-use modifiers"},{"location":"rules/#modifiers-should-have-default-parameters","text":"Composables that accept a Modifier as a parameter to be applied to the whole component represented by the composable function should name the parameter modifier and assign the parameter a default value of Modifier . It should appear as the first optional parameter in the parameter list; after all required parameters (except for trailing lambda parameters) but before any other parameters with default values. Any default modifiers desired by a composable function should come after the modifier parameter\u2019s value in the composable function\u2019s implementation, keeping Modifier as the default parameter value. More info: Modifier documentation Related rule: ComposeModifierWithoutDefault","title":"Modifiers should have default parameters"},{"location":"rules/#avoid-modifier-extension-factory-functions","text":"Using @Composable builder functions for modifiers is not recommended, as they cause unnecessary recompositions. To avoid this, you should use Modifier.composed instead, as it limits recomposition to just the modifier instance, rather than the whole function tree. Composed modifiers may be created outside of composition, shared across elements, and declared as top-level constants, making them more flexible than modifiers that can only be created via a @Composable function call, and easier to avoid accidentally sharing state across elements. More info: Modifier extensions , Composed modifiers in Jetpack Compose by Jorge Castillo and Composed modifiers in API guidelines Related rule: ComposeComposableModifier","title":"Avoid Modifier extension factory functions"}]}